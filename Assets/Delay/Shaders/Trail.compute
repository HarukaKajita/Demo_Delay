#pragma kernel Init
#pragma kernel Update

#include "Noise.cginc"
#include "TrailUtility.cginc"
//トレイル数 * パーツ数
RWStructuredBuffer<float3> posBuffer;
RWStructuredBuffer<float3> dirBuffer;

[numthreads(THREADNUM, 1, 1)]
void Init(uint3 groupID: SV_GROUPID, uint3 groupThreadID: SV_GROUPTHREADID){
  uint trailID = groupID.x;
  uint nodeID = groupThreadID.x;
  uint index = getBufferIndex(trailID, nodeID);

  uint iterattion = TRAIL_BUFF_NODE_NUM - nodeID;
  float3 pos = rand3D(float3(trailID, 0, 0.523452)); pos *= 5;
  float2 rnadomVec = rand2D(float2(pos.xz));
  float3 dir = normalize(float3(rnadomVec.x, 0, rnadomVec.y));
  //dir = updateDir(pos, dir);
  for(uint i = 0; i < iterattion; i++){
    dir = updateDir(pos, dir);
    pos = updatePos(pos, dir);
  }
  posBuffer[index] = pos;//float3(nodeID, trailID, index);
  dirBuffer[index] = dir;//1;
}

//groupIDがdispatchの塊のID
//groupThreadIDがグループ内のスレッドのID
//SV_DispatchThreadIDが全スレッド内のID

//1Trailは256partsで構成される
[numthreads(THREADNUM, 1, 1)]
void Update(uint3 groupID: SV_GROUPID, uint3 groupThreadID: SV_GROUPTHREADID)
{
  uint trailID = groupID.x;
  uint nodeID = groupThreadID.x;
  uint index = getBufferIndex(trailID, nodeID);
  
  float3 pos = 0;
  float3 dir = 0;
  
  if (nodeID != 0)
  {
    //前のパーツを追う
    pos = posBuffer[index - 1];
    dir = dirBuffer[index - 1];
  }
  else
  {
    pos = posBuffer[index];
    dir = dirBuffer[index];
    //Boundsからはみ出そうなら内側に返す
    float2 bb = float2(16,9)/1.5;
    float boundS = bs(pos.xz, bb) * 10;
    float2 bd = boundDirection(pos.xz, bb);
    float3 boundDir = normalize(float3(bd.x,0,bd.y));
    float3 crossDir = normalize(cross(boundDir, float3(0,1,0)));
    
    dir = updateDir(pos, dir);
    dir = dir + (boundDir * boundS);
    pos = updatePos(pos, dir);
  }
  
  posBuffer[index] = pos;
  dirBuffer[index] = dir;
}